Microsoft (R) Macro Assembler Version 14.28.29913.0	    04/13/21 16:19:53
Matrix Mathe						     Page 1 - 1


				TITLE Matrix Mather

				; This program does matrix math.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
project.asm(8) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data

 00000000 53 65 6C 65 63	userChoice byte "Select Operation -- (1) for Matrix Multiplication, (2) To find Matrix Determinant, (3) To find Matrix Inverse",13,10,0
	   74 20 4F 70 65
	   72 61 74 69 6F
	   6E 20 2D 2D 20
	   28 31 29 20 66
	   6F 72 20 4D 61
	   74 72 69 78 20
	   4D 75 6C 74 69
	   70 6C 69 63 61
	   74 69 6F 6E 2C
	   20 28 32 29 20
	   54 6F 20 66 69
	   6E 64 20 4D 61
	   74 72 69 78 20
	   44 65 74 65 72
	   6D 69 6E 61 6E
	   74 2C 20 28 33
	   29 20 54 6F 20
	   66 69 6E 64 20
	   4D 61 74 72 69
	   78 20 49 6E 76
	   65 72 73 65 0D
	   0A 00
 00000070 45 72 72 6F 72	errorChoice byte "Error, selection out of range. Choose again.",13,10,0
	   2C 20 73 65 6C
	   65 63 74 69 6F
	   6E 20 6F 75 74
	   20 6F 66 20 72
	   61 6E 67 65 2E
	   20 43 68 6F 6F
	   73 65 20 61 67
	   61 69 6E 2E 0D
	   0A 00
 0000009F 00			userSelection byte ?
 000000A0 00000000		matrixSize DWORD ?
 000000A4 45 6E 74 65 72	matrixMessage byte "Enter the size of your matrix (square matrix only, maximum size of 10x10): ",13,10,0
	   20 74 68 65 20
	   73 69 7A 65 20
	   6F 66 20 79 6F
	   75 72 20 6D 61
	   74 72 69 78 20
	   28 73 71 75 61
	   72 65 20 6D 61
	   74 72 69 78 20
	   6F 6E 6C 79 2C
	   20 6D 61 78 69
	   6D 75 6D 20 73
	   69 7A 65 20 6F
	   66 20 31 30 78
	   31 30 29 3A 20
	   0D 0A 00
 000000F2 54 68 65 20 73	confirmSize byte "The size of your matrix is: ",0
	   69 7A 65 20 6F
	   66 20 79 6F 75
	   72 20 6D 61 74
	   72 69 78 20 69
	   73 3A 20 00
 0000010F 45 6E 74 65 72	valueEntryText1 byte "Enter value for row ",0
	   20 76 61 6C 75
	   65 20 66 6F 72
	   20 72 6F 77 20
	   00
 00000124 20 63 6F 6C 75	valueEntryText2 byte " column ",0
	   6D 6E 20 00
 0000012D 66 6F 72 20 6D	emptySpaceA byte "for matrix A: ",0
	   61 74 72 69 78
	   20 41 3A 20 00
 0000013C 20 66 6F 72 20	emptySpaceB byte " for matrix B: ",0
	   6D 61 74 72 69
	   78 20 42 3A 20
	   00
 0000014C 20 0D 0A 00		emptyCR byte " ",13,10,0
 00000150 20 00			displaySeparator byte " ",0

 00000152 00000000		jPos DWORD 0	;These two values are important for array indexing. jPos refers to the current column in the 2D matrix, iPos refers to the row
 00000156 00000000		iPos DWORD 0
 0000015A 00000000		tempValPos DWORD 0	;Need a temp variable to store for indexing
 0000015E 00000000		tempMulResult DWORD 0
 00000162 00000000		tempCResult DWORD 0

 00000166  00000064 [		matrixA DWORD 100 DUP(0)
	    00000000
	   ]
 000002F6  00000064 [		matrixB DWORD 100 DUP(0)
	    00000000
	   ]
 00000486  00000064 [		matrixC DWORD 100 DUP(0)
	    00000000
	   ]

 00000616 FFFFFFFF		iVal DWORD -1	;The i, j, k simplify indexing for operations.
 0000061A FFFFFFFF		jVal DWORD -1
 0000061E FFFFFFFF		kVal DWORD -1

 00000000			.code

 00000000			main PROC

 00000000			startPath:
				;Decision Pathing for the user
 00000000  BA 00000000 R		mov edx,OFFSET userChoice
 00000005  E8 00000000 E		call WriteString
 0000000A  E8 00000000 E		call ReadInt
 0000000F  A2 0000009F R		mov userSelection,al
 00000014  80 3D 0000009F R		cmp userSelection,4
	   04
 0000001B  0F 8D 0000048E		jge errorMSGChoice
 00000021  80 3D 0000009F R		cmp userSelection,1
	   01
 00000028  74 00			je matrixMul	;If user selects 1, goto matrix multiplication



 0000002A			matrixMul:
 0000002A  BA 000000A4 R			mov edx,OFFSET matrixMessage	;Start of asking matrix size
 0000002F  E8 00000000 E		call WriteString
 00000034  E8 00000000 E		call ReadInt
 00000039  BA 0000014C R		mov edx,OFFSET emptyCR
 0000003E  E8 00000000 E		call WriteString
 00000043  A3 000000A0 R		mov matrixSize,eax
 00000048  BA 000000F2 R		mov edx,OFFSET confirmSize
 0000004D  E8 00000000 E		call WriteString
 00000052  BA 000000A0 R		mov edx,OFFSET matrixSize
 00000057  E8 00000000 E		call WriteDec
 0000005C  BA 0000014C R		mov edx,OFFSET emptyCR
 00000061  E8 00000000 E		call WriteString

				;**************INIT MATRIX A HERE*******************

 00000066			initAPre: ;	Zero registers, move matrixSize to ecx to begin the loop counter.
 00000066  8B 0D 000000A0 R		mov ecx,matrixSize
 0000006C  33 C0			xor eax,eax
 0000006E  33 DB			xor ebx,ebx

 00000070			initOuterA:
 00000070  A1 000000A0 R		mov eax,matrixSize
 00000075  A3 00000156 R		mov iPos,eax
 0000007A  29 0D 00000156 R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 00000080  83 E9 01			sub ecx,1
 00000083  51				push ecx
 00000084  8B 0D 000000A0 R		mov ecx,matrixSize	;Init inner loop size
 0000008A  EB 00			jmp initInnerA

 0000008C			initInnerA: ;Most of this is nonsense to get the text out, but below is the array initialization. 
						   ;Because ASM doesn't have the abstraction of 2D arrays, you must create the appearance of 2D using pointer math

					;**TEXT CRAP HERE BEFORE ACTUAL MEMORY VALUE MANIPULATION**
 0000008C  BA 0000010F R		mov edx,OFFSET valueEntryText1
 00000091  E8 00000000 E		call WriteString
 00000096  A1 00000156 R		mov eax,iPos
 0000009B  E8 00000000 E		call WriteDec
 000000A0  BA 00000124 R		mov edx,OFFSET valueEntryText2
 000000A5  E8 00000000 E		call WriteString
 000000AA  A1 000000A0 R		mov eax,matrixSize
 000000AF  2B C1			sub eax,ecx
 000000B1  E8 00000000 E		call WriteDec	
 000000B6  BA 00000150 R		mov edx,OFFSET displaySeparator
 000000BB  E8 00000000 E		call WriteString
 000000C0  BA 0000012D R		mov edx,OFFSET emptySpaceA
 000000C5  E8 00000000 E		call WriteString
 000000CA  BA 0000014C R		mov edx,OFFSET emptyCR
 000000CF  E8 00000000 E		call WriteString
					


 000000D4  A1 000000A0 R		mov eax,matrixSize
 000000D9  2B C1			sub eax,ecx
 000000DB  BB 00000004			mov ebx,4
 000000E0  F7 E3			mul ebx
 000000E2  A3 0000015A R		mov tempValPos,eax
 000000E7  A1 00000156 R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 000000EC  8B 1D 000000A0 R		mov ebx,matrixSize
 000000F2  F7 E3			mul ebx
 000000F4  BB 00000004			mov ebx,4
 000000F9  F7 E3			mul ebx
 000000FB  01 05 0000015A R		add tempValPos,eax
 00000101  8B 1D 0000015A R		mov ebx,tempValPos
 00000107  BE 00000166 R		mov esi,OFFSET matrixA
 0000010C  E8 00000000 E		call ReadInt
 00000111  89 04 1E			mov [esi+ebx],eax

 00000114  49				dec ecx
 00000115  0F 85 FFFFFF71		jnz initInnerA

 0000011B  59				pop ecx
 0000011C  83 F9 00			cmp ecx,0
 0000011F  0F 8F FFFFFF4B		jg initOuterA ;Loop continues if ecx in stack still had number > 0


					; END INIT OF MATRIX A


				;*********************DISPLAY MATRIX A HERE****************************

 00000125			displayMatrixAPre:
 00000125  8B 0D 000000A0 R		mov ecx,matrixSize
 0000012B  33 C0			xor eax,eax
 0000012D  33 DB			xor ebx,ebx

 0000012F			displayMatrixAOuter:
 0000012F  A1 000000A0 R		mov eax,matrixSize
 00000134  A3 00000156 R		mov iPos,eax
 00000139  29 0D 00000156 R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 0000013F  83 E9 01			sub ecx,1
 00000142  51				push ecx
 00000143  8B 0D 000000A0 R		mov ecx,matrixSize	;Init inner loop size
 00000149  BA 0000014C R		mov edx,OFFSET emptyCR
 0000014E  E8 00000000 E		call WriteString
 00000153  EB 00			jmp displayMatrixAInner

 00000155			displayMatrixAInner:

 00000155  A1 000000A0 R		mov eax,matrixSize
 0000015A  2B C1			sub eax,ecx
 0000015C  BB 00000004			mov ebx,4
 00000161  F7 E3			mul ebx
 00000163  A3 0000015A R		mov tempValPos,eax
 00000168  A1 00000156 R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 0000016D  8B 1D 000000A0 R		mov ebx,matrixSize
 00000173  F7 E3			mul ebx
 00000175  BB 00000004			mov ebx,4
 0000017A  F7 E3			mul ebx
 0000017C  01 05 0000015A R		add tempValPos,eax
 00000182  8B 1D 0000015A R		mov ebx,tempValPos
 00000188  BE 00000166 R		mov esi,OFFSET matrixA
 0000018D  8B 04 1E			mov eax,[esi+ebx]
 00000190  E8 00000000 E		call WriteDec
 00000195  BA 00000150 R		mov edx,OFFSET displaySeparator
 0000019A  E8 00000000 E		call WriteString

 0000019F  E2 B4			loop displayMatrixAInner

 000001A1  59				pop ecx
 000001A2  83 F9 00			cmp ecx,0
 000001A5  7F 88			jg displayMatrixAOuter ;Loop continues if ecx in stack still had number > 0

 000001A7  BA 0000014C R		mov edx,OFFSET emptyCR
 000001AC  E8 00000000 E		call WriteString


				;**************INIT MATRIX B HERE*******************

 000001B1			initBPre: ;	Zero registers, move matrixSize to ecx to begin the loop counter.
 000001B1  8B 0D 000000A0 R		mov ecx,matrixSize
 000001B7  33 C0			xor eax,eax
 000001B9  33 DB			xor ebx,ebx

 000001BB			initOuterB:
 000001BB  A1 000000A0 R		mov eax,matrixSize
 000001C0  A3 00000156 R		mov iPos,eax
 000001C5  29 0D 00000156 R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 000001CB  83 E9 01			sub ecx,1
 000001CE  51				push ecx
 000001CF  8B 0D 000000A0 R		mov ecx,matrixSize	;Init inner loop size
 000001D5  EB 00			jmp initInnerB

 000001D7			initInnerB: ;Most of this is nonsense to get the text out, but below is the array initialization. 
						   ;Because ASM doesn't have the abstraction of 2D arrays, you must create the appearance of 2D using pointer math

					;**TEXT CRAP HERE BEFORE ACTUAL MEMORY VALUE MANIPULATION**
 000001D7  BA 0000010F R		mov edx,OFFSET valueEntryText1
 000001DC  E8 00000000 E		call WriteString
 000001E1  A1 00000156 R		mov eax,iPos
 000001E6  E8 00000000 E		call WriteDec
 000001EB  BA 00000124 R		mov edx,OFFSET valueEntryText2
 000001F0  E8 00000000 E		call WriteString
 000001F5  A1 000000A0 R		mov eax,matrixSize
 000001FA  2B C1			sub eax,ecx
 000001FC  E8 00000000 E		call WriteDec	
 00000201  BA 00000150 R		mov edx,OFFSET displaySeparator
 00000206  E8 00000000 E		call WriteString
 0000020B  BA 0000013C R		mov edx,OFFSET emptySpaceB
 00000210  E8 00000000 E		call WriteString
 00000215  BA 0000014C R		mov edx,OFFSET emptyCR
 0000021A  E8 00000000 E		call WriteString
					


 0000021F  A1 000000A0 R		mov eax,matrixSize
 00000224  2B C1			sub eax,ecx
 00000226  BB 00000004			mov ebx,4
 0000022B  F7 E3			mul ebx
 0000022D  A3 0000015A R		mov tempValPos,eax
 00000232  A1 00000156 R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 00000237  8B 1D 000000A0 R		mov ebx,matrixSize
 0000023D  F7 E3			mul ebx
 0000023F  BB 00000004			mov ebx,4
 00000244  F7 E3			mul ebx
 00000246  01 05 0000015A R		add tempValPos,eax
 0000024C  8B 1D 0000015A R		mov ebx,tempValPos
 00000252  BE 000002F6 R		mov esi,OFFSET matrixB
 00000257  E8 00000000 E		call ReadInt
 0000025C  89 04 1E			mov [esi+ebx],eax

 0000025F  49				dec ecx
 00000260  0F 85 FFFFFF71		jnz initInnerB

 00000266  59				pop ecx
 00000267  83 F9 00			cmp ecx,0
 0000026A  0F 8F FFFFFF4B		jg initOuterB ;Loop continues if ecx in stack still had number > 0


					; END INIT OF MATRIX B


				;*********************DISPLAY MATRIX B HERE****************************

 00000270			displayMatrixBPre:
 00000270  8B 0D 000000A0 R		mov ecx,matrixSize
 00000276  33 C0			xor eax,eax
 00000278  33 DB			xor ebx,ebx

 0000027A			displayMatrixBOuter:
 0000027A  A1 000000A0 R		mov eax,matrixSize
 0000027F  A3 00000156 R		mov iPos,eax
 00000284  29 0D 00000156 R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 0000028A  83 E9 01			sub ecx,1
 0000028D  51				push ecx
 0000028E  8B 0D 000000A0 R		mov ecx,matrixSize	;Init inner loop size
 00000294  BA 0000014C R		mov edx,OFFSET emptyCR
 00000299  E8 00000000 E		call WriteString
 0000029E  EB 00			jmp displayMatrixBInner

 000002A0			displayMatrixBInner:

 000002A0  A1 000000A0 R		mov eax,matrixSize
 000002A5  2B C1			sub eax,ecx
 000002A7  BB 00000004			mov ebx,4
 000002AC  F7 E3			mul ebx
 000002AE  A3 0000015A R		mov tempValPos,eax
 000002B3  A1 00000156 R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 000002B8  8B 1D 000000A0 R		mov ebx,matrixSize
 000002BE  F7 E3			mul ebx
 000002C0  BB 00000004			mov ebx,4
 000002C5  F7 E3			mul ebx
 000002C7  01 05 0000015A R		add tempValPos,eax
 000002CD  8B 1D 0000015A R		mov ebx,tempValPos
 000002D3  BE 000002F6 R		mov esi,OFFSET matrixB
 000002D8  8B 04 1E			mov eax,[esi+ebx]
 000002DB  E8 00000000 E		call WriteDec
 000002E0  BA 00000150 R		mov edx,OFFSET displaySeparator
 000002E5  E8 00000000 E		call WriteString

 000002EA  E2 B4			loop displayMatrixBInner

 000002EC  59				pop ecx
 000002ED  83 F9 00			cmp ecx,0
 000002F0  7F 88			jg displayMatrixBOuter ;Loop continues if ecx in stack still had number > 0

 000002F2  BA 0000014C R		mov edx,OFFSET emptyCR
 000002F7  E8 00000000 E		call WriteString


				;***********BEGIN MULT OPERATION HERE********************

 000002FC			multPre:
 000002FC  8B 0D 000000A0 R		mov ecx,matrixSize
 00000302  33 C0			xor eax,eax
 00000304  33 DB			xor ebx,ebx

 00000306			multOuter:	;for(i = 0; i < matrix.length; i++)
 00000306  A1 000000A0 R		mov eax,matrixSize
 0000030B  A3 00000616 R		mov iVal,eax
 00000310  29 0D 00000616 R		sub iVal,ecx
 00000316  49				dec ecx
 00000317  51				push ecx	;Stack has OUTER LOOP COUNTER ONLY
 00000318  8B 0D 000000A0 R		mov ecx,matrixSize
 0000031E  EB 00			jmp multMiddle

 00000320			multMiddle:	;for(j = 0; j < matrix.length; j++)
 00000320  A1 000000A0 R		mov eax,matrixSize
 00000325  A3 0000061A R		mov jVal,eax
 0000032A  29 0D 0000061A R		sub jVal,ecx
 00000330  49				dec ecx
 00000331  51				push ecx	;TOP OF STACK MIDDLE LOOP -> OUTER LOOP VALUES
 00000332  8B 0D 000000A0 R		mov ecx,matrixSize
 00000338  A1 0000061A R		mov eax,jVal
 0000033D  BB 00000004			mov ebx,4
 00000342  F7 E3			mul ebx
 00000344  A3 00000162 R		mov tempCResult,eax
 00000349  A1 00000616 R		mov eax,iVal
 0000034E  BB 00000004			mov ebx,4
 00000353  F7 E3			mul ebx
 00000355  8B 1D 000000A0 R		mov ebx,matrixSize
 0000035B  F7 E3			mul ebx
 0000035D  01 05 00000162 R		add tempCResult,eax
 00000363  8B 1D 00000162 R		mov ebx,tempCResult
 00000369  EB 00			jmp multInner

 0000036B			multInner:	;for(k = 0; k < matrix.length; k++)
 0000036B  BE 00000486 R		mov esi,OFFSET matrixC
 00000370  56				push esi	;TOP OF STACK MATRIX C ADDRESS -> MIDDLE LOOP -> OUTER LOOP
 00000371  A1 000000A0 R		mov eax,matrixSize
 00000376  2B C1			sub eax,ecx
 00000378  A3 0000061E R		mov kVal,eax
 0000037D  BB 00000004			mov ebx,4
 00000382  F7 E3			mul ebx
 00000384  A3 0000015A R		mov tempValPos,eax
 00000389  A1 00000616 R		mov eax,iVal
 0000038E  BB 00000004			mov ebx,4
 00000393  F7 E3			mul ebx
 00000395  8B 1D 000000A0 R		mov ebx,matrixSize
 0000039B  F7 E3			mul ebx
 0000039D  01 05 0000015A R		add tempValPos,eax
 000003A3  8B 1D 0000015A R		mov ebx,tempValPos
 000003A9  BE 00000166 R		mov esi,OFFSET matrixA
 000003AE  8B 04 1E			mov eax,[esi+ebx]
 000003B1  A3 0000015E R		mov tempMulResult,eax	;Have element A[i][k] stored

 000003B6  A1 0000061A R		mov eax,jVal
 000003BB  BB 00000004			mov ebx,4
 000003C0  F7 E3			mul ebx
 000003C2  A3 0000015A R		mov tempValPos,eax
 000003C7  A1 0000061E R		mov eax,kVal
 000003CC  BB 00000004			mov ebx,4
 000003D1  F7 E3			mul ebx
 000003D3  8B 1D 000000A0 R		mov ebx,matrixSize
 000003D9  F7 E3			mul ebx
 000003DB  01 05 0000015A R		add tempValPos,eax
 000003E1  8B 1D 0000015A R		mov ebx,tempValPos
 000003E7  BE 000002F6 R		mov esi,OFFSET matrixB
 000003EC  8B 04 1E			mov eax,[esi+ebx]
 000003EF  8B 1D 0000015E R		mov ebx,tempMulResult
 000003F5  F7 E3			mul ebx
 000003F7  5E				pop esi	;TOP OF STACK MIDDLE LOOP -> OUTER LOOP VALUES
 000003F8  8B 1D 00000162 R		mov ebx,tempCResult
 000003FE  01 04 1E			add [esi+ebx],eax

 00000401  49				dec ecx
 00000402  0F 85 FFFFFF63		jnz multInner

 00000408  59				pop ecx	;Stack has OUTER LOOP COUNTER ONLY
 00000409  83 F9 00			cmp ecx,0
 0000040C  0F 8F FFFFFF0E		jg multMiddle	;Loop continues if ecx in stack still had number > 0 goto middle loop

 00000412  59				pop ecx	;STACK EMPTY
 00000413  83 F9 00			cmp ecx,0
 00000416  0F 8F FFFFFEEA		jg multOuter	;Loop continues if ecx in stack still had number > 0 goto outer loop



				;*********************DISPLAY MATRIX C HERE****************************

 0000041C			displayMatrixCPre:
 0000041C  8B 0D 000000A0 R		mov ecx,matrixSize
 00000422  33 C0			xor eax,eax
 00000424  33 DB			xor ebx,ebx

 00000426			displayMatrixCOuter:
 00000426  A1 000000A0 R		mov eax,matrixSize
 0000042B  A3 00000156 R		mov iPos,eax
 00000430  29 0D 00000156 R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 00000436  83 E9 01			sub ecx,1
 00000439  51				push ecx
 0000043A  8B 0D 000000A0 R		mov ecx,matrixSize	;Init inner loop size
 00000440  BA 0000014C R		mov edx,OFFSET emptyCR
 00000445  E8 00000000 E		call WriteString
 0000044A  EB 00			jmp displayMatrixCInner

 0000044C			displayMatrixCInner:

 0000044C  A1 000000A0 R		mov eax,matrixSize
 00000451  2B C1			sub eax,ecx
 00000453  BB 00000004			mov ebx,4
 00000458  F7 E3			mul ebx
 0000045A  A3 0000015A R		mov tempValPos,eax
 0000045F  A1 00000156 R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 00000464  8B 1D 000000A0 R		mov ebx,matrixSize
 0000046A  F7 E3			mul ebx
 0000046C  BB 00000004			mov ebx,4
 00000471  F7 E3			mul ebx
 00000473  01 05 0000015A R		add tempValPos,eax
 00000479  8B 1D 0000015A R		mov ebx,tempValPos
 0000047F  BE 00000486 R		mov esi,OFFSET matrixC
 00000484  8B 04 1E			mov eax,[esi+ebx]
 00000487  E8 00000000 E		call WriteDec
 0000048C  BA 00000150 R		mov edx,OFFSET displaySeparator
 00000491  E8 00000000 E		call WriteString

 00000496  E2 B4			loop displayMatrixCInner

 00000498  59				pop ecx
 00000499  83 F9 00			cmp ecx,0
 0000049C  7F 88			jg displayMatrixCOuter ;Loop continues if ecx in stack still had number > 0

 0000049E  BA 0000014C R		mov edx,OFFSET emptyCR
 000004A3  E8 00000000 E		call WriteString




					exit
 000004A8  6A 00	   *	    push   +000000000h
 000004AA  E8 00000000 E   *	    call   ExitProcess

 000004AF			errorMSGChoice:
 000004AF  BA 00000070 R		mov edx,OFFSET errorChoice
 000004B4  E8 00000000 E		call WriteString
 000004B9  E9 FFFFFB42			jmp startPath

 000004BE			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.28.29913.0	    04/13/21 16:19:53
Matrix Mathe						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000622 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004BE Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000004BE Public STDCALL
  startPath  . . . . . . . . . .	L Near	 00000000 _TEXT	
  matrixMul  . . . . . . . . . .	L Near	 0000002A _TEXT	
  initAPre . . . . . . . . . . .	L Near	 00000066 _TEXT	
  initOuterA . . . . . . . . . .	L Near	 00000070 _TEXT	
  initInnerA . . . . . . . . . .	L Near	 0000008C _TEXT	
  displayMatrixAPre  . . . . . .	L Near	 00000125 _TEXT	
  displayMatrixAOuter  . . . . .	L Near	 0000012F _TEXT	
  displayMatrixAInner  . . . . .	L Near	 00000155 _TEXT	
  initBPre . . . . . . . . . . .	L Near	 000001B1 _TEXT	
  initOuterB . . . . . . . . . .	L Near	 000001BB _TEXT	
  initInnerB . . . . . . . . . .	L Near	 000001D7 _TEXT	
  displayMatrixBPre  . . . . . .	L Near	 00000270 _TEXT	
  displayMatrixBOuter  . . . . .	L Near	 0000027A _TEXT	
  displayMatrixBInner  . . . . .	L Near	 000002A0 _TEXT	
  multPre  . . . . . . . . . . .	L Near	 000002FC _TEXT	
  multOuter  . . . . . . . . . .	L Near	 00000306 _TEXT	
  multMiddle . . . . . . . . . .	L Near	 00000320 _TEXT	
  multInner  . . . . . . . . . .	L Near	 0000036B _TEXT	
  displayMatrixCPre  . . . . . .	L Near	 0000041C _TEXT	
  displayMatrixCOuter  . . . . .	L Near	 00000426 _TEXT	
  displayMatrixCInner  . . . . .	L Near	 0000044C _TEXT	
  errorMSGChoice . . . . . . . .	L Near	 000004AF _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
confirmSize  . . . . . . . . . .	Byte	 000000F2 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displaySeparator . . . . . . . .	Byte	 00000150 _DATA	
emptyCR  . . . . . . . . . . . .	Byte	 0000014C _DATA	
emptySpaceA  . . . . . . . . . .	Byte	 0000012D _DATA	
emptySpaceB  . . . . . . . . . .	Byte	 0000013C _DATA	
errorChoice  . . . . . . . . . .	Byte	 00000070 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
iPos . . . . . . . . . . . . . .	DWord	 00000156 _DATA	
iVal . . . . . . . . . . . . . .	DWord	 00000616 _DATA	
jPos . . . . . . . . . . . . . .	DWord	 00000152 _DATA	
jVal . . . . . . . . . . . . . .	DWord	 0000061A _DATA	
kVal . . . . . . . . . . . . . .	DWord	 0000061E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matrixA  . . . . . . . . . . . .	DWord	 00000166 _DATA	
matrixB  . . . . . . . . . . . .	DWord	 000002F6 _DATA	
matrixC  . . . . . . . . . . . .	DWord	 00000486 _DATA	
matrixMessage  . . . . . . . . .	Byte	 000000A4 _DATA	
matrixSize . . . . . . . . . . .	DWord	 000000A0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tempCResult  . . . . . . . . . .	DWord	 00000162 _DATA	
tempMulResult  . . . . . . . . .	DWord	 0000015E _DATA	
tempValPos . . . . . . . . . . .	DWord	 0000015A _DATA	
userChoice . . . . . . . . . . .	Byte	 00000000 _DATA	
userSelection  . . . . . . . . .	Byte	 0000009F _DATA	
valueEntryText1  . . . . . . . .	Byte	 0000010F _DATA	
valueEntryText2  . . . . . . . .	Byte	 00000124 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
