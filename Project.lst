Microsoft (R) Macro Assembler Version 14.28.29913.0	    04/23/21 07:36:28
Matrix Mathe						     Page 1 - 1


				TITLE Matrix Mather

				; This program does matrix math.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
project.asm(8) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto,dwExitCode:dword

 00000000			.data

 00000000 53 65 6C 65 63	userChoice byte "Select Operation -- (1) for Matrix Multiplication, (2) To find Matrix Inverse, (3) To find Matrix Determinant, (4) for Matrix Addition, (5) for Matrix Subtraction",13,10,0
	   74 20 4F 70 65
	   72 61 74 69 6F
	   6E 20 2D 2D 20
	   28 31 29 20 66
	   6F 72 20 4D 61
	   74 72 69 78 20
	   4D 75 6C 74 69
	   70 6C 69 63 61
	   74 69 6F 6E 2C
	   20 28 32 29 20
	   54 6F 20 66 69
	   6E 64 20 4D 61
	   74 72 69 78 20
	   49 6E 76 65 72
	   73 65 2C 20 28
	   33 29 20 54 6F
	   20 66 69 6E 64
	   20 4D 61 74 72
	   69 78 20 44 65
	   74 65 72 6D 69
	   6E 61 6E 74 2C
	   20 28 34 29 20
	   66 6F 72 20 4D
	   61 74 72 69 78
	   20 41 64 64 69
	   74 69 6F 6E 2C
	   20 28 35 29 20
	   66 6F 72 20 4D
	   61 74 72 69 78
	   20 53 75 62 74
	   72 61 63 74 69
	   6F 6E 0D 0A 00
 000000A5 45 72 72 6F 72	errorChoice byte "Error, selection out of range. Choose again.",13,10,0
	   2C 20 73 65 6C
	   65 63 74 69 6F
	   6E 20 6F 75 74
	   20 6F 66 20 72
	   61 6E 67 65 2E
	   20 43 68 6F 6F
	   73 65 20 61 67
	   61 69 6E 2E 0D
	   0A 00
 000000D4 00			userSelection byte ?
 000000D5 00000000		matrixSize DWORD ?
 000000D9 45 6E 74 65 72	matrixMessage byte "Enter the size of your matrix (square matrix only, maximum size of 10x10): ",13,10,0
	   20 74 68 65 20
	   73 69 7A 65 20
	   6F 66 20 79 6F
	   75 72 20 6D 61
	   74 72 69 78 20
	   28 73 71 75 61
	   72 65 20 6D 61
	   74 72 69 78 20
	   6F 6E 6C 79 2C
	   20 6D 61 78 69
	   6D 75 6D 20 73
	   69 7A 65 20 6F
	   66 20 31 30 78
	   31 30 29 3A 20
	   0D 0A 00
 00000127 54 68 65 20 73	confirmSize byte "The size of your matrix is: ",0
	   69 7A 65 20 6F
	   66 20 79 6F 75
	   72 20 6D 61 74
	   72 69 78 20 69
	   73 3A 20 00
 00000144 45 6E 74 65 72	valueEntryText1 byte "Enter value for row ",0
	   20 76 61 6C 75
	   65 20 66 6F 72
	   20 72 6F 77 20
	   00
 00000159 20 63 6F 6C 75	valueEntryText2 byte " column ",0
	   6D 6E 20 00
 00000162 66 6F 72 20 6D	emptySpaceA byte "for matrix A: ",0
	   61 74 72 69 78
	   20 41 3A 20 00
 00000171 20 66 6F 72 20	emptySpaceB byte " for matrix B: ",0
	   6D 61 74 72 69
	   78 20 42 3A 20
	   00
 00000181 20 0D 0A 00		emptyCR byte " ",13,10,0
 00000185 20 00			displaySeparator byte " ",0

 00000187 00000000		jPos DWORD 0	;These two values are important for array indexing. jPos refers to the current column in the 2D matrix, iPos refers to the row
 0000018B 00000000		iPos DWORD 0
 0000018F 00000000		kPos DWORD 0
 00000193 00000000		tempValPos DWORD 0	;Need a temp variable to store for indexing
 00000197 00000000		tempMulResult DWORD 0
 0000019B 00000000		tempCResult DWORD 0
 0000019F 00000000		factor REAL4 ?
 000001A3 00000000		divisor REAL4 ?
 000001A7 00000000		dividend REAL4 ?
 000001AB 00000000		showNum REAL4 ?
 000001AF 00000000		zero REAL4 0.0
 000001B3 3F800000		one REAL4 1.0

 000001B7  00000064 [		matrixA REAL4 100 DUP(?)
	    00000000
	   ]
 00000347  00000064 [		matrixB REAL4 100 DUP(?)
	    00000000
	   ]
 000004D7  00000064 [		matrixC REAL4 100 DUP(?)
	    00000000
	   ]
 00000667  00000064 [		identityMatrix REAL4 100 DUP(?)
	    00000000
	   ]

 000007F7 FFFFFFFF		iVal DWORD -1	;The i, j, k simplify indexing for operations.
 000007FB FFFFFFFF		jVal DWORD -1
 000007FF FFFFFFFF		kVal DWORD -1

 00000000			.code

 00000000			main PROC

 00000000  9B DB E3			FINIT

 00000003			startPath:
				;Decision Pathing for the user
 00000003  BA 00000000 R		mov edx,OFFSET userChoice
 00000008  E8 00000000 E		call WriteString
 0000000D  E8 00000000 E		call ReadInt
 00000012  A2 000000D4 R		mov userSelection,al
 00000017  80 3D 000000D4 R		cmp userSelection,6
	   06
 0000001E  0F 8D 00000BED		jge errorMSGChoice



 00000024			matrixMul:
 00000024  BA 000000D9 R			mov edx,OFFSET matrixMessage	;Start of asking matrix size
 00000029  E8 00000000 E		call WriteString
 0000002E  E8 00000000 E		call ReadInt
 00000033  BA 00000181 R		mov edx,OFFSET emptyCR
 00000038  E8 00000000 E		call WriteString
 0000003D  A3 000000D5 R		mov matrixSize,eax
 00000042  BA 00000127 R		mov edx,OFFSET confirmSize
 00000047  E8 00000000 E		call WriteString
 0000004C  BA 000000D5 R		mov edx,OFFSET matrixSize
 00000051  E8 00000000 E		call WriteDec
 00000056  BA 00000181 R		mov edx,OFFSET emptyCR
 0000005B  E8 00000000 E		call WriteString

 00000060  80 3D 000000D4 R		cmp userSelection,2
	   02
 00000067  0F 84 000005D6		je matInverse	;If user selects 2, goto matrix inverse because Matrix B is not needed
 0000006D  80 3D 000000D4 R		cmp userSelection,3
	   03
 00000074  0F 84 000005C9		je matInverse
					;If user selects 3, goto matrix det because Matrix B is not needed

				;**************INIT MATRIX A HERE*******************

 0000007A			initAPre: ;	Zero registers, move matrixSize to ecx to begin the loop counter.
 0000007A  8B 0D 000000D5 R		mov ecx,matrixSize
 00000080  33 C0			xor eax,eax
 00000082  33 DB			xor ebx,ebx

 00000084			initOuterA:
 00000084  A1 000000D5 R		mov eax,matrixSize
 00000089  A3 0000018B R		mov iPos,eax
 0000008E  29 0D 0000018B R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 00000094  83 E9 01			sub ecx,1
 00000097  51				push ecx
 00000098  8B 0D 000000D5 R		mov ecx,matrixSize	;Init inner loop size
 0000009E  EB 00			jmp initInnerA

 000000A0			initInnerA: ;Most of this is nonsense to get the text out, but below is the array initialization. 
						   ;Because ASM doesn't have the abstraction of 2D arrays, you must create the appearance of 2D using pointer math

					;**TEXT CRAP HERE BEFORE ACTUAL MEMORY VALUE MANIPULATION**
 000000A0  BA 00000144 R		mov edx,OFFSET valueEntryText1
 000000A5  E8 00000000 E		call WriteString
 000000AA  A1 0000018B R		mov eax,iPos
 000000AF  E8 00000000 E		call WriteDec
 000000B4  BA 00000159 R		mov edx,OFFSET valueEntryText2
 000000B9  E8 00000000 E		call WriteString
 000000BE  A1 000000D5 R		mov eax,matrixSize
 000000C3  2B C1			sub eax,ecx
 000000C5  E8 00000000 E		call WriteDec	
 000000CA  BA 00000185 R		mov edx,OFFSET displaySeparator
 000000CF  E8 00000000 E		call WriteString
 000000D4  BA 00000162 R		mov edx,OFFSET emptySpaceA
 000000D9  E8 00000000 E		call WriteString
 000000DE  BA 00000181 R		mov edx,OFFSET emptyCR
 000000E3  E8 00000000 E		call WriteString
					


 000000E8  A1 000000D5 R		mov eax,matrixSize
 000000ED  2B C1			sub eax,ecx
 000000EF  BB 00000004			mov ebx,4
 000000F4  F7 E3			mul ebx
 000000F6  A3 00000193 R		mov tempValPos,eax
 000000FB  A1 0000018B R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 00000100  8B 1D 000000D5 R		mov ebx,matrixSize
 00000106  F7 E3			mul ebx
 00000108  BB 00000004			mov ebx,4
 0000010D  F7 E3			mul ebx
 0000010F  01 05 00000193 R		add tempValPos,eax
 00000115  8B 1D 00000193 R		mov ebx,tempValPos
 0000011B  BE 000001B7 R		mov esi,OFFSET matrixA
 00000120  E8 00000000 E		call ReadInt
 00000125  89 04 1E			mov [esi+ebx],eax

 00000128  49				dec ecx
 00000129  0F 85 FFFFFF71		jnz initInnerA

 0000012F  59				pop ecx
 00000130  83 F9 00			cmp ecx,0
 00000133  0F 8F FFFFFF4B		jg initOuterA ;Loop continues if ecx in stack still had number > 0


					; END INIT OF MATRIX A


				;*********************DISPLAY MATRIX A HERE****************************

 00000139			displayMatrixAPre:
 00000139  8B 0D 000000D5 R		mov ecx,matrixSize
 0000013F  33 C0			xor eax,eax
 00000141  33 DB			xor ebx,ebx

 00000143			displayMatrixAOuter:
 00000143  A1 000000D5 R		mov eax,matrixSize
 00000148  A3 0000018B R		mov iPos,eax
 0000014D  29 0D 0000018B R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 00000153  83 E9 01			sub ecx,1
 00000156  51				push ecx
 00000157  8B 0D 000000D5 R		mov ecx,matrixSize	;Init inner loop size
 0000015D  BA 00000181 R		mov edx,OFFSET emptyCR
 00000162  E8 00000000 E		call WriteString
 00000167  EB 00			jmp displayMatrixAInner

 00000169			displayMatrixAInner:

 00000169  A1 000000D5 R		mov eax,matrixSize
 0000016E  2B C1			sub eax,ecx
 00000170  BB 00000004			mov ebx,4
 00000175  F7 E3			mul ebx
 00000177  A3 00000193 R		mov tempValPos,eax
 0000017C  A1 0000018B R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 00000181  8B 1D 000000D5 R		mov ebx,matrixSize
 00000187  F7 E3			mul ebx
 00000189  BB 00000004			mov ebx,4
 0000018E  F7 E3			mul ebx
 00000190  01 05 00000193 R		add tempValPos,eax
 00000196  8B 1D 00000193 R		mov ebx,tempValPos
 0000019C  BE 000001B7 R		mov esi,OFFSET matrixA
 000001A1  8B 04 1E			mov eax,[esi+ebx]
 000001A4  E8 00000000 E		call WriteDec
 000001A9  BA 00000185 R		mov edx,OFFSET displaySeparator
 000001AE  E8 00000000 E		call WriteString

 000001B3  E2 B4			loop displayMatrixAInner

 000001B5  59				pop ecx
 000001B6  83 F9 00			cmp ecx,0
 000001B9  7F 88			jg displayMatrixAOuter ;Loop continues if ecx in stack still had number > 0

 000001BB  BA 00000181 R		mov edx,OFFSET emptyCR
 000001C0  E8 00000000 E		call WriteString


				;**************INIT MATRIX B HERE*******************

 000001C5			initBPre: ;	Zero registers, move matrixSize to ecx to begin the loop counter.
 000001C5  8B 0D 000000D5 R		mov ecx,matrixSize
 000001CB  33 C0			xor eax,eax
 000001CD  33 DB			xor ebx,ebx

 000001CF			initOuterB:
 000001CF  A1 000000D5 R		mov eax,matrixSize
 000001D4  A3 0000018B R		mov iPos,eax
 000001D9  29 0D 0000018B R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 000001DF  83 E9 01			sub ecx,1
 000001E2  51				push ecx
 000001E3  8B 0D 000000D5 R		mov ecx,matrixSize	;Init inner loop size
 000001E9  EB 00			jmp initInnerB

 000001EB			initInnerB: ;Most of this is nonsense to get the text out, but below is the array initialization. 
						   ;Because ASM doesn't have the abstraction of 2D arrays, you must create the appearance of 2D using pointer math

					;**TEXT CRAP HERE BEFORE ACTUAL MEMORY VALUE MANIPULATION**
 000001EB  BA 00000144 R		mov edx,OFFSET valueEntryText1
 000001F0  E8 00000000 E		call WriteString
 000001F5  A1 0000018B R		mov eax,iPos
 000001FA  E8 00000000 E		call WriteDec
 000001FF  BA 00000159 R		mov edx,OFFSET valueEntryText2
 00000204  E8 00000000 E		call WriteString
 00000209  A1 000000D5 R		mov eax,matrixSize
 0000020E  2B C1			sub eax,ecx
 00000210  E8 00000000 E		call WriteDec	
 00000215  BA 00000185 R		mov edx,OFFSET displaySeparator
 0000021A  E8 00000000 E		call WriteString
 0000021F  BA 00000171 R		mov edx,OFFSET emptySpaceB
 00000224  E8 00000000 E		call WriteString
 00000229  BA 00000181 R		mov edx,OFFSET emptyCR
 0000022E  E8 00000000 E		call WriteString
					


 00000233  A1 000000D5 R		mov eax,matrixSize
 00000238  2B C1			sub eax,ecx
 0000023A  BB 00000004			mov ebx,4
 0000023F  F7 E3			mul ebx
 00000241  A3 00000193 R		mov tempValPos,eax
 00000246  A1 0000018B R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 0000024B  8B 1D 000000D5 R		mov ebx,matrixSize
 00000251  F7 E3			mul ebx
 00000253  BB 00000004			mov ebx,4
 00000258  F7 E3			mul ebx
 0000025A  01 05 00000193 R		add tempValPos,eax
 00000260  8B 1D 00000193 R		mov ebx,tempValPos
 00000266  BE 00000347 R		mov esi,OFFSET matrixB
 0000026B  E8 00000000 E		call ReadInt
 00000270  89 04 1E			mov [esi+ebx],eax

 00000273  49				dec ecx
 00000274  0F 85 FFFFFF71		jnz initInnerB

 0000027A  59				pop ecx
 0000027B  83 F9 00			cmp ecx,0
 0000027E  0F 8F FFFFFF4B		jg initOuterB ;Loop continues if ecx in stack still had number > 0


					; END INIT OF MATRIX B


				;*********************DISPLAY MATRIX B HERE****************************

 00000284			displayMatrixBPre:
 00000284  8B 0D 000000D5 R		mov ecx,matrixSize
 0000028A  33 C0			xor eax,eax
 0000028C  33 DB			xor ebx,ebx

 0000028E			displayMatrixBOuter:
 0000028E  A1 000000D5 R		mov eax,matrixSize
 00000293  A3 0000018B R		mov iPos,eax
 00000298  29 0D 0000018B R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 0000029E  83 E9 01			sub ecx,1
 000002A1  51				push ecx
 000002A2  8B 0D 000000D5 R		mov ecx,matrixSize	;Init inner loop size
 000002A8  BA 00000181 R		mov edx,OFFSET emptyCR
 000002AD  E8 00000000 E		call WriteString
 000002B2  EB 00			jmp displayMatrixBInner

 000002B4			displayMatrixBInner:

 000002B4  A1 000000D5 R		mov eax,matrixSize
 000002B9  2B C1			sub eax,ecx
 000002BB  BB 00000004			mov ebx,4
 000002C0  F7 E3			mul ebx
 000002C2  A3 00000193 R		mov tempValPos,eax
 000002C7  A1 0000018B R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 000002CC  8B 1D 000000D5 R		mov ebx,matrixSize
 000002D2  F7 E3			mul ebx
 000002D4  BB 00000004			mov ebx,4
 000002D9  F7 E3			mul ebx
 000002DB  01 05 00000193 R		add tempValPos,eax
 000002E1  8B 1D 00000193 R		mov ebx,tempValPos
 000002E7  BE 00000347 R		mov esi,OFFSET matrixB
 000002EC  8B 04 1E			mov eax,[esi+ebx]
 000002EF  E8 00000000 E		call WriteDec
 000002F4  BA 00000185 R		mov edx,OFFSET displaySeparator
 000002F9  E8 00000000 E		call WriteString

 000002FE  E2 B4			loop displayMatrixBInner

 00000300  59				pop ecx
 00000301  83 F9 00			cmp ecx,0
 00000304  7F 88			jg displayMatrixBOuter ;Loop continues if ecx in stack still had number > 0

 00000306  BA 00000181 R		mov edx,OFFSET emptyCR
 0000030B  E8 00000000 E		call WriteString

 00000310  80 3D 000000D4 R		cmp userSelection,1
	   01
 00000317  0F 84 00000175		je multPre

 0000031D  80 3D 000000D4 R		cmp userSelection,5
	   05
 00000324  0F 84 000000AB		je subPre

				;***********BEGIN ADD HERE*******************
 0000032A			addPre:

					; this calculates the total size of the Matrix memory ((matrixSize*matrixSize)*4)-4 = tempMatrixSize (i.e [matrixSize+60])
 0000032A  BB 00000004			mov ebx, 4
 0000032F  A1 000000D5 R		mov eax, matrixSize
 00000334  F7 E0			mul eax
 00000336  F7 E3			mul ebx
 00000338  2B C3			sub eax, ebx
					;mov tempMatrixSize, eax


					; this zeroes out all the registes and preps for the actual addfunctions
 0000033A  8B 0D 000000D5 R		mov ecx, matrixSize
 00000340  33 C0			xor eax,eax
 00000342  33 DB			xor ebx,ebx

					
 00000344  C7 05 00000193 R		mov tempValPos, 0
	   00000000
 0000034E  C7 05 0000018B R		mov iPos, 0
	   00000000
 00000358  C7 05 00000187 R		mov jPos, 0
	   00000000

					


 00000362			addOuter:	;this is kinda setup for the next outer loop iteration	
 00000362  C7 05 00000187 R		mov jPos, 0
	   00000000
					

 0000036C  A1 000000D5 R		mov eax, matrixSize					; This moves the matrix size into eax and MULs it by 4 to get its position in memory
 00000371  BB 00000004			mov ebx, 4
 00000376  F7 E3			mul ebx

					; MUL resets edx so restore value
					; this subs 1 from the matrixSize and stores in edx for the outerLoopCounter
 00000378  8B 15 000000D5 R		mov edx, matrixSize
 0000037E  83 EA 01			sub edx, 1

					;mov ecx, tempMatrixSize				
 00000381  8B 1D 000000D5 R		mov ebx, matrixSize					
 00000387  39 1D 0000018B R		cmp iPos, ebx						
 0000038D  0F 8D 0000021F		jge displayMatrixCPre				; Adding is completed so jmp to matrixC
					

 00000393			addInner:	
					
					; This is where the adding gets done
 00000393  8B 0D 00000193 R		mov ecx, tempValPos
 00000399  8B 81 000001B7 R		mov eax, [matrixA+ecx]
 0000039F  03 81 00000347 R		add eax, [matrixB+ecx]
 000003A5  89 81 000004D7 R		mov [matrixC+ecx], eax

					; add BEFORE THIS SECTION
 000003AB  A1 00000193 R		mov eax, tempValPos		; this adds 4 to maintain the memory position of the var
 000003B0  83 C0 04			add eax, 4
 000003B3  A3 00000193 R		mov tempValPos, eax

 000003B8  39 15 00000187 R		cmp jPos, edx
 000003BE  7D 08			jge  addInnerDone
 000003C0  FF 05 00000187 R		inc jPos
 000003C6  EB CB			jmp addInner

 000003C8			addInnerDone:
 000003C8  FF 05 0000018B R		inc iPos				
 000003CE  A1 00000193 R		mov eax, tempValPos
 000003D3  EB 8D			jmp addOuter


				;***********BEGIN SUB HERE*********************

 000003D5			subPre:

					; this calculates the total size of the Matrix memory ((matrixSize*matrixSize)*4)-4 = tempMatrixSize (i.e [matrixSize+60])
 000003D5  BB 00000004			mov ebx, 4
 000003DA  A1 000000D5 R		mov eax, matrixSize
 000003DF  F7 E0			mul eax
 000003E1  F7 E3			mul ebx
 000003E3  2B C3			sub eax, ebx
					;mov tempMatrixSize, eax


					; this zeroes out all the registes and preps for the actual subfunctions
 000003E5  8B 0D 000000D5 R		mov ecx, matrixSize
 000003EB  33 C0			xor eax,eax
 000003ED  33 DB			xor ebx,ebx

					
 000003EF  C7 05 00000193 R		mov tempValPos, 0
	   00000000
 000003F9  C7 05 0000018B R		mov iPos, 0
	   00000000
 00000403  C7 05 00000187 R		mov jPos, 0
	   00000000

					


 0000040D			subOuter:	;this is kinda setup for the next outer loop iteration	
 0000040D  C7 05 00000187 R		mov jPos, 0
	   00000000
					

 00000417  A1 000000D5 R		mov eax, matrixSize					; This moves the matrix size into eax and MULs it by 4 to get its position in memory
 0000041C  BB 00000004			mov ebx, 4
 00000421  F7 E3			mul ebx

					; MUL resets edx so restore value
					; this subs 1 from the matrixSize and stores in edx for the outerLoopCounter
 00000423  8B 15 000000D5 R		mov edx, matrixSize
 00000429  83 EA 01			sub edx, 1

					;mov ecx, tempMatrixSize				
 0000042C  8B 1D 000000D5 R		mov ebx, matrixSize					
 00000432  39 1D 0000018B R		cmp iPos, ebx						
 00000438  0F 8D 00000174		jge displayMatrixCPre				; Subtraction is completed so jmp to matrixC
					

 0000043E			subInner:	
					
					; This is where the SUBTRACTION gets done
 0000043E  8B 0D 00000193 R		mov ecx, tempValPos
 00000444  8B 81 000001B7 R		mov eax, [matrixA+ecx]
 0000044A  2B 81 00000347 R		sub eax, [matrixB+ecx]

 00000450  78 08			js signedSub
 00000452  89 81 000004D7 R		mov [matrixC+ecx], eax				; sign flag is PL
 00000458  EB 0B			jmp afterSignedSub

 0000045A			signedSub:
					; IMPLMENT CONVERSION
 0000045A  F7 D0			not eax
 0000045C  83 C0 01			add eax, 1
 0000045F  89 81 000004D7 R		mov [matrixC+ecx], eax				; sign flag is PL

 00000465			afterSignedSub:
					; sub BEFORE THIS SECTION
 00000465  A1 00000193 R		mov eax, tempValPos		; this adds 4 to maintain the memory position of the var
 0000046A  83 C0 04			add eax, 4
 0000046D  A3 00000193 R		mov tempValPos, eax

 00000472  39 15 00000187 R		cmp jPos, edx
 00000478  7D 08			jge subInnerDone
 0000047A  FF 05 00000187 R		inc jPos
 00000480  EB BC			jmp subInner

 00000482			subInnerDone:
 00000482  FF 05 0000018B R		inc iPos				
 00000488  A1 00000193 R		mov eax, tempValPos
 0000048D  E9 FFFFFF7B			jmp subOuter


				;***********BEGIN MULT OPERATION HERE********************

 00000492			multPre:
 00000492  8B 0D 000000D5 R		mov ecx,matrixSize
 00000498  33 C0			xor eax,eax
 0000049A  33 DB			xor ebx,ebx

 0000049C			multOuter:	;for(i = 0; i < matrix.length; i++)
 0000049C  A1 000000D5 R		mov eax,matrixSize
 000004A1  A3 000007F7 R		mov iVal,eax
 000004A6  29 0D 000007F7 R		sub iVal,ecx
 000004AC  49				dec ecx
 000004AD  51				push ecx	;Stack has OUTER LOOP COUNTER ONLY
 000004AE  8B 0D 000000D5 R		mov ecx,matrixSize
 000004B4  EB 00			jmp multMiddle

 000004B6			multMiddle:	;for(j = 0; j < matrix.length; j++)
 000004B6  A1 000000D5 R		mov eax,matrixSize
 000004BB  A3 000007FB R		mov jVal,eax
 000004C0  29 0D 000007FB R		sub jVal,ecx
 000004C6  49				dec ecx
 000004C7  51				push ecx	;TOP OF STACK MIDDLE LOOP -> OUTER LOOP VALUES
 000004C8  8B 0D 000000D5 R		mov ecx,matrixSize
 000004CE  A1 000007FB R		mov eax,jVal
 000004D3  BB 00000004			mov ebx,4
 000004D8  F7 E3			mul ebx
 000004DA  A3 0000019B R		mov tempCResult,eax
 000004DF  A1 000007F7 R		mov eax,iVal
 000004E4  BB 00000004			mov ebx,4
 000004E9  F7 E3			mul ebx
 000004EB  8B 1D 000000D5 R		mov ebx,matrixSize
 000004F1  F7 E3			mul ebx
 000004F3  01 05 0000019B R		add tempCResult,eax
 000004F9  8B 1D 0000019B R		mov ebx,tempCResult
 000004FF  EB 00			jmp multInner

 00000501			multInner:	;for(k = 0; k < matrix.length; k++)
 00000501  BE 000004D7 R		mov esi,OFFSET matrixC
 00000506  56				push esi	;TOP OF STACK MATRIX C ADDRESS -> MIDDLE LOOP -> OUTER LOOP
 00000507  A1 000000D5 R		mov eax,matrixSize
 0000050C  2B C1			sub eax,ecx
 0000050E  A3 000007FF R		mov kVal,eax
 00000513  BB 00000004			mov ebx,4
 00000518  F7 E3			mul ebx
 0000051A  A3 00000193 R		mov tempValPos,eax
 0000051F  A1 000007F7 R		mov eax,iVal
 00000524  BB 00000004			mov ebx,4
 00000529  F7 E3			mul ebx
 0000052B  8B 1D 000000D5 R		mov ebx,matrixSize
 00000531  F7 E3			mul ebx
 00000533  01 05 00000193 R		add tempValPos,eax
 00000539  8B 1D 00000193 R		mov ebx,tempValPos
 0000053F  BE 000001B7 R		mov esi,OFFSET matrixA
 00000544  8B 04 1E			mov eax,[esi+ebx]
 00000547  A3 00000197 R		mov tempMulResult,eax	;Have element A[i][k] stored

 0000054C  A1 000007FB R		mov eax,jVal
 00000551  BB 00000004			mov ebx,4
 00000556  F7 E3			mul ebx
 00000558  A3 00000193 R		mov tempValPos,eax
 0000055D  A1 000007FF R		mov eax,kVal
 00000562  BB 00000004			mov ebx,4
 00000567  F7 E3			mul ebx
 00000569  8B 1D 000000D5 R		mov ebx,matrixSize
 0000056F  F7 E3			mul ebx
 00000571  01 05 00000193 R		add tempValPos,eax
 00000577  8B 1D 00000193 R		mov ebx,tempValPos
 0000057D  BE 00000347 R		mov esi,OFFSET matrixB
 00000582  8B 04 1E			mov eax,[esi+ebx]
 00000585  8B 1D 00000197 R		mov ebx,tempMulResult
 0000058B  F7 E3			mul ebx
 0000058D  5E				pop esi	;TOP OF STACK MIDDLE LOOP -> OUTER LOOP VALUES
 0000058E  8B 1D 0000019B R		mov ebx,tempCResult
 00000594  01 04 1E			add [esi+ebx],eax

 00000597  49				dec ecx
 00000598  0F 85 FFFFFF63		jnz multInner

 0000059E  59				pop ecx	;Stack has OUTER LOOP COUNTER ONLY
 0000059F  83 F9 00			cmp ecx,0
 000005A2  0F 8F FFFFFF0E		jg multMiddle	;Loop continues if ecx in stack still had number > 0 goto middle loop

 000005A8  59				pop ecx	;STACK EMPTY
 000005A9  83 F9 00			cmp ecx,0
 000005AC  0F 8F FFFFFEEA		jg multOuter	;Loop continues if ecx in stack still had number > 0 goto outer loop



				;*********************DISPLAY MATRIX C HERE****************************

 000005B2			displayMatrixCPre:
 000005B2  8B 0D 000000D5 R		mov ecx,matrixSize
 000005B8  33 C0			xor eax,eax
 000005BA  33 DB			xor ebx,ebx

 000005BC			displayMatrixCOuter:
 000005BC  A1 000000D5 R		mov eax,matrixSize
 000005C1  A3 0000018B R		mov iPos,eax
 000005C6  29 0D 0000018B R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 000005CC  83 E9 01			sub ecx,1
 000005CF  51				push ecx
 000005D0  8B 0D 000000D5 R		mov ecx,matrixSize	;Init inner loop size
 000005D6  BA 00000181 R		mov edx,OFFSET emptyCR
 000005DB  E8 00000000 E		call WriteString
 000005E0  EB 00			jmp displayMatrixCInner

 000005E2			displayMatrixCInner:

 000005E2  A1 000000D5 R		mov eax,matrixSize
 000005E7  2B C1			sub eax,ecx
 000005E9  BB 00000004			mov ebx,4
 000005EE  F7 E3			mul ebx
 000005F0  A3 00000193 R		mov tempValPos,eax
 000005F5  A1 0000018B R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 000005FA  8B 1D 000000D5 R		mov ebx,matrixSize
 00000600  F7 E3			mul ebx
 00000602  BB 00000004			mov ebx,4
 00000607  F7 E3			mul ebx
 00000609  01 05 00000193 R		add tempValPos,eax
 0000060F  8B 1D 00000193 R		mov ebx,tempValPos
 00000615  BE 000004D7 R		mov esi,OFFSET matrixC
 0000061A  8B 04 1E			mov eax,[esi+ebx]
 0000061D  E8 00000000 E		call WriteDec
 00000622  BA 00000185 R		mov edx,OFFSET displaySeparator
 00000627  E8 00000000 E		call WriteString

 0000062C  E2 B4			loop displayMatrixCInner

 0000062E  59				pop ecx
 0000062F  83 F9 00			cmp ecx,0
 00000632  7F 88			jg displayMatrixCOuter ;Loop continues if ecx in stack still had number > 0

 00000634  BA 00000181 R		mov edx,OFFSET emptyCR
 00000639  E8 00000000 E		call WriteString
 0000063E  E9 000005C7			jmp SKIP


 00000643			matInverse:

 00000643			initIDPre:
 00000643  33 C0			xor eax,eax
 00000645  33 DB			xor ebx,ebx
 00000647  8B 0D 000000D5 R		mov ecx,matrixSize
 0000064D  C7 05 0000018B R		mov iPos,0
	   00000000
 00000657  C7 05 00000187 R		mov jPos,0
	   00000000

 00000661			initIDOuter:
 00000661  A1 000000D5 R		mov eax,matrixSize
 00000666  49				dec ecx
 00000667  51				push ecx
 00000668  8B 0D 000000D5 R		mov ecx,matrixSize
 0000066E  C7 05 00000187 R		mov jPos,0
	   00000000

 00000678			initIDInner:
 00000678  C7 05 00000193 R		mov tempValPos,0
	   00000000
 00000682  A1 0000018B R		mov eax,iPos
 00000687  8B 1D 00000187 R		mov ebx,jPos
 0000068D  FF 05 00000187 R		inc jPos
 00000693  3B C3			cmp eax,ebx
 00000695  75 3C			jne InitIDNE
 00000697  BB 00000004			mov ebx,4
 0000069C  F7 E3			mul ebx
 0000069E  8B 1D 000000D5 R		mov ebx,matrixSize
 000006A4  F7 E3			mul ebx
 000006A6  A3 00000193 R		mov tempValPos,eax
 000006AB  A1 0000018B R		mov eax,iPos
 000006B0  BB 00000004			mov ebx,4
 000006B5  F7 E3			mul ebx
 000006B7  01 05 00000193 R		add tempValPos,eax
 000006BD  8B 1D 00000193 R		mov ebx,tempValPos
 000006C3  BE 00000667 R		mov esi,OFFSET identityMatrix
 000006C8  D9 05 000001B3 R		fld one
 000006CE  D9 1C 33			fstp REAL4 PTR[ebx+esi]
 000006D1  EB 43			jmp InitIDReset

 000006D3			InitIDNE:
 000006D3  BB 00000004			mov ebx,4
 000006D8  F7 E3			mul ebx
 000006DA  8B 1D 000000D5 R		mov ebx,matrixSize
 000006E0  F7 E3			mul ebx
 000006E2  A3 00000193 R		mov tempValPos,eax
 000006E7  A1 00000187 R		mov eax,jPos
 000006EC  BB 00000004			mov ebx,4
 000006F1  F7 E3			mul ebx
 000006F3  01 05 00000193 R		add tempValPos,eax
 000006F9  8B 1D 00000193 R		mov ebx,tempValPos
 000006FF  BE 00000667 R		mov esi,OFFSET identityMatrix
 00000704  D9 05 000001AF R		fld zero
 0000070A  D9 1C 33			fstp REAL4 PTR[ebx+esi]

 0000070D  49				dec ecx
 0000070E  0F 85 FFFFFF64		jnz initIDInner

 00000714  EB 07			jmp InitIDResetOuter

 00000716			InitIDReset:
 00000716  49				dec ecx
 00000717  0F 85 FFFFFF5B		jnz initIDInner

 0000071D			InitIDResetOuter:
					
 0000071D  FF 05 0000018B R		inc iPos
 00000723  59				pop ecx
 00000724  83 F9 00			cmp ecx,0
 00000727  0F 8F FFFFFF34		jg initIDOuter

 0000072D  BA 00000181 R		mov edx,OFFSET emptyCR
 00000732  E8 00000000 E		call WriteString

 00000737			initInversePre:
 00000737  33 C0			xor eax,eax
 00000739  33 DB			xor ebx,ebx
 0000073B  8B 0D 000000D5 R		mov ecx,matrixSize

 00000741			initInverseOuter:
 00000741  A1 000000D5 R		mov eax,matrixSize
 00000746  A3 0000018B R		mov iPos,eax
 0000074B  29 0D 0000018B R		sub iPos,ecx
 00000751  49				dec ecx
 00000752  51				push ecx
 00000753  8B 0D 000000D5 R		mov ecx,matrixSize
 00000759  C7 05 00000187 R		mov jPos,0
	   00000000

 00000763			initInverseInner:

 00000763  BA 00000144 R		mov edx,OFFSET valueEntryText1
 00000768  E8 00000000 E		call WriteString
 0000076D  A1 0000018B R		mov eax,iPos
 00000772  E8 00000000 E		call WriteDec
 00000777  BA 00000159 R		mov edx,OFFSET valueEntryText2
 0000077C  E8 00000000 E		call WriteString
 00000781  A1 000000D5 R		mov eax,matrixSize
 00000786  2B C1			sub eax,ecx
 00000788  E8 00000000 E		call WriteDec	
 0000078D  BA 00000185 R		mov edx,OFFSET displaySeparator
 00000792  E8 00000000 E		call WriteString
 00000797  BA 00000162 R		mov edx,OFFSET emptySpaceA
 0000079C  E8 00000000 E		call WriteString
 000007A1  BA 00000181 R		mov edx,OFFSET emptyCR
 000007A6  E8 00000000 E		call WriteString

 000007AB  A1 0000018B R		mov eax,iPos
 000007B0  BB 00000004			mov ebx,4
 000007B5  F7 E3			mul ebx
 000007B7  8B 1D 000000D5 R		mov ebx,matrixSize
 000007BD  F7 E3			mul ebx
 000007BF  A3 00000193 R		mov tempValPos,eax
 000007C4  A1 00000187 R		mov eax,jPos
 000007C9  BB 00000004			mov ebx,4
 000007CE  F7 E3			mul ebx
 000007D0  01 05 00000193 R		add tempValPos,eax
 000007D6  8B 1D 00000193 R		mov ebx,tempValPos
 000007DC  BE 000001B7 R		mov esi,OFFSET matrixA
 000007E1  E8 00000000 E		call ReadFloat
 000007E6  D9 1C 33			fstp REAL4 PTR[ebx+esi]

 000007E9  FF 05 00000187 R		inc jPos
 000007EF  49				dec ecx
 000007F0  0F 85 FFFFFF6D		jnz initInverseInner

 000007F6  59				pop ecx
 000007F7  83 F9 00			cmp ecx,0
 000007FA  0F 8F FFFFFF41		jg initInverseOuter

 00000800  BA 00000181 R		mov edx,OFFSET emptyCR
 00000805  E8 00000000 E		call WriteString

 0000080A			EliminationPre:
 0000080A  8B 0D 000000D5 R		mov ecx,matrixSize
 00000810  33 C0			xor eax,eax
 00000812  33 DB			xor ebx,ebx
 00000814  C7 05 00000187 R		mov jPos,0
	   00000000
 0000081E  C7 05 0000018B R		mov iPos,0
	   00000000
 00000828  C7 05 0000018F R		mov kPos,0
	   00000000

 00000832			EliminationOuter:
					
 00000832  49				dec ecx
 00000833  51				push ecx
 00000834  8B 0D 000000D5 R		mov ecx,matrixSize
 0000083A  C7 05 0000018B R		mov iPos,0
	   00000000

 00000844			EliminationMiddle:
 00000844  49				dec ecx
 00000845  51				push ecx
 00000846  C7 05 00000193 R		mov tempValPos,0
	   00000000
 00000850  A1 00000187 R		mov eax,jPos
 00000855  8B 1D 0000018B R		mov ebx,iPos
 0000085B  3B C3			cmp eax,ebx
 0000085D  0F 84 000001EA		je EliminationConditional
 00000863  BB 00000004			mov ebx,4
 00000868  F7 E3			mul ebx
 0000086A  A3 00000193 R		mov tempValPos,eax
 0000086F  A1 0000018B R		mov eax,iPos
 00000874  F7 E3			mul ebx
 00000876  8B 1D 000000D5 R		mov ebx,matrixSize
 0000087C  F7 E3			mul ebx
 0000087E  03 05 00000193 R		add eax,tempValPos
 00000884  8B D8			mov ebx,eax
 00000886  BE 000001B7 R		mov esi,OFFSET matrixA
 0000088B  D9 04 33			fld REAL4 PTR[ebx+esi]	;ST(0): MatrixA[i][j]
 0000088E  A1 00000187 R		mov eax,jPos
 00000893  BB 00000004			mov ebx,4
 00000898  F7 E3			mul ebx
 0000089A  A3 00000193 R		mov tempValPos,eax
 0000089F  A1 00000187 R		mov eax,jPos
 000008A4  F7 E3			mul ebx
 000008A6  8B 1D 000000D5 R		mov ebx,matrixSize
 000008AC  F7 E3			mul ebx
 000008AE  03 05 00000193 R		add eax,tempValPos
 000008B4  8B D8			mov ebx,eax
 000008B6  BE 000001B7 R		mov esi,OFFSET matrixA
 000008BB  D9 04 33			fld REAL4 PTR[ebx+esi]	;ST(0): MatrixA[j][j] -> ST(1): MatrixA[i][j]
 000008BE  DE F9			fdiv	;ST(0): (short)MatrixA[i][j]/MatrixA[j][j]
 000008C0  D9 1D 0000019F R		fstp factor	;FPU empty
 000008C6  C7 05 0000018F R		mov kPos,0
	   00000000

 000008D0  8B 0D 000000D5 R		mov ecx,matrixSize

 000008D6			EliminationInner:

				;****MATRIX A PORTION****
 000008D6  C7 05 00000193 R		mov tempValPos,0
	   00000000
 000008E0  A1 0000018B R		mov eax,iPos
 000008E5  BB 00000004			mov ebx,4
 000008EA  F7 E3			mul ebx
 000008EC  8B 1D 000000D5 R		mov ebx,matrixSize
 000008F2  F7 E3			mul ebx
 000008F4  A3 00000193 R		mov tempValPos,eax
 000008F9  A1 0000018F R		mov eax,kPos
 000008FE  BB 00000004			mov ebx,4
 00000903  F7 E3			mul ebx
 00000905  01 05 00000193 R		add tempValPos,eax
 0000090B  BE 000001B7 R		mov esi,OFFSET matrixA
 00000910  8B 1D 00000193 R		mov ebx,tempValPos
 00000916  D9 04 33			fld REAL4 PTR[ebx+esi]	;ST(0): A[i][k]
 00000919  A1 00000187 R		mov eax,jPos
 0000091E  BB 00000004			mov ebx,4
 00000923  F7 E3			mul ebx
 00000925  8B 1D 000000D5 R		mov ebx,matrixSize
 0000092B  F7 E3			mul ebx
 0000092D  A3 00000193 R		mov tempValPos,eax
 00000932  A1 0000018F R		mov eax,kPos
 00000937  BB 00000004			mov ebx,4
 0000093C  F7 E3			mul ebx
 0000093E  01 05 00000193 R		add tempValPos,eax
 00000944  8B 1D 00000193 R		mov ebx,tempValPos
 0000094A  D9 04 33			fld REAL4 PTR[ebx+esi]	;ST(0): A[j][k] -> ST(1) A[i][k]
 0000094D  D9 05 0000019F R		fld factor	;ST(0) factor -> A[j][k] -> A[i][k]
 00000953  DE C9			fmul	;ST(0): A[j][k] -> ST(1) A[i][k]
 00000955  DE E9			fsub	;ST(0): A[i][k]-factor*A[j][k]
 00000957  A1 0000018B R		mov eax,iPos
 0000095C  BB 00000004			mov ebx,4
 00000961  F7 E3			mul ebx
 00000963  8B 1D 000000D5 R		mov ebx,matrixSize
 00000969  F7 E3			mul ebx
 0000096B  A3 00000193 R		mov tempValPos,eax
 00000970  A1 0000018F R		mov eax,kPos
 00000975  BB 00000004			mov ebx,4
 0000097A  F7 E3			mul ebx
 0000097C  01 05 00000193 R		add tempValPos,eax
 00000982  8B 1D 00000193 R		mov ebx,tempValPos
 00000988  D9 1C 33			fstp REAL4 PTR[ebx+esi]

				;****IDENTITY MATRIX PORTION****
 0000098B  C7 05 00000193 R		mov tempValPos,0
	   00000000
 00000995  A1 0000018B R		mov eax,iPos
 0000099A  BB 00000004			mov ebx,4
 0000099F  F7 E3			mul ebx
 000009A1  8B 1D 000000D5 R		mov ebx,matrixSize
 000009A7  F7 E3			mul ebx
 000009A9  A3 00000193 R		mov tempValPos,eax
 000009AE  A1 0000018F R		mov eax,kPos
 000009B3  BB 00000004			mov ebx,4
 000009B8  F7 E3			mul ebx
 000009BA  01 05 00000193 R		add tempValPos,eax
 000009C0  BE 00000667 R		mov esi,OFFSET identityMatrix
 000009C5  8B 1D 00000193 R		mov ebx,tempValPos
 000009CB  D9 04 33			fld REAL4 PTR[ebx+esi]	;ST(0): A[i][k]
 000009CE  A1 00000187 R		mov eax,jPos
 000009D3  BB 00000004			mov ebx,4
 000009D8  F7 E3			mul ebx
 000009DA  8B 1D 000000D5 R		mov ebx,matrixSize
 000009E0  F7 E3			mul ebx
 000009E2  A3 00000193 R		mov tempValPos,eax
 000009E7  A1 0000018F R		mov eax,kPos
 000009EC  BB 00000004			mov ebx,4
 000009F1  F7 E3			mul ebx
 000009F3  01 05 00000193 R		add tempValPos,eax
 000009F9  8B 1D 00000193 R		mov ebx,tempValPos
 000009FF  D9 04 33			fld REAL4 PTR[ebx+esi]	;ST(0): A[j][k] -> ST(1) A[i][k]
 00000A02  D9 05 0000019F R		fld factor	;ST(0) factor -> A[j][k] -> A[i][k]
 00000A08  DE C9			fmul	;ST(0): A[j][k] -> ST(1) A[i][k]
 00000A0A  DE E9			fsub	;ST(0): A[i][k]-factor*A[j][k]
 00000A0C  A1 0000018B R		mov eax,iPos
 00000A11  BB 00000004			mov ebx,4
 00000A16  F7 E3			mul ebx
 00000A18  8B 1D 000000D5 R		mov ebx,matrixSize
 00000A1E  F7 E3			mul ebx
 00000A20  A3 00000193 R		mov tempValPos,eax
 00000A25  A1 0000018F R		mov eax,kPos
 00000A2A  BB 00000004			mov ebx,4
 00000A2F  F7 E3			mul ebx
 00000A31  01 05 00000193 R		add tempValPos,eax
 00000A37  8B 1D 00000193 R		mov ebx,tempValPos
 00000A3D  D9 1C 33			fstp REAL4 PTR[ebx+esi]

					;;SO FAR THIS WORKS, BELOW BEWARE

 00000A40  FF 05 0000018F R		inc kPos
 00000A46  49				dec ecx
 00000A47  0F 85 FFFFFE89		jnz EliminationInner

 00000A4D			EliminationConditional:
 00000A4D  FF 05 0000018B R		inc iPos
 00000A53  59				pop ecx
 00000A54  83 F9 00			cmp ecx,0
 00000A57  0F 8F FFFFFDE7		jg EliminationMiddle

 00000A5D  FF 05 00000187 R		inc jPos
 00000A63  59				pop ecx
 00000A64  83 F9 00			cmp ecx,0
 00000A67  0F 8F FFFFFDC5		jg EliminationOuter



 00000A6D			finalElimPre:
 00000A6D  33 C0			xor eax,eax
 00000A6F  33 DB			xor ebx,ebx
 00000A71  8B 0D 000000D5 R		mov ecx,matrixSize
 00000A77  C7 05 0000018B R		mov iPos,0
	   00000000

 00000A81			finalElimOuter:
 00000A81  C7 05 00000193 R		mov tempValPos,0
	   00000000
 00000A8B  49				dec ecx
 00000A8C  51				push ecx
 00000A8D  C7 05 00000187 R		mov jPos,0
	   00000000
 00000A97  A1 0000018B R		mov eax,iPos
 00000A9C  BB 00000004			mov ebx,4
 00000AA1  F7 E3			mul ebx
 00000AA3  8B 1D 000000D5 R		mov ebx,matrixSize
 00000AA9  F7 E3			mul ebx
 00000AAB  A3 00000193 R		mov tempValPos,eax
 00000AB0  A1 0000018B R		mov eax,iPos
 00000AB5  BB 00000004			mov ebx,4
 00000ABA  F7 E3			mul ebx
 00000ABC  01 05 00000193 R		add tempValPos,eax
 00000AC2  8B 1D 00000193 R		mov ebx,tempValPos
 00000AC8  BE 000001B7 R		mov esi,OFFSET matrixA
 00000ACD  D9 04 1E			fld REAL4 PTR[esi+ebx]
 00000AD0  D9 1D 000001A3 R		fstp divisor
 00000AD6  D9 05 000001A3 R		fld divisor	;Going to push this down the stack for determinant calculations
 00000ADC  8B 0D 000000D5 R		mov ecx,matrixSize

 00000AE2			finalElimInner:
 00000AE2  C7 05 00000193 R		mov tempValPos,0
	   00000000
 00000AEC  A1 0000018B R		mov eax,iPos
 00000AF1  BB 00000004			mov ebx,4
 00000AF6  F7 E3			mul ebx
 00000AF8  8B 1D 000000D5 R		mov ebx,matrixSize
 00000AFE  F7 E3			mul ebx
 00000B00  A3 00000193 R		mov tempValPos,eax
 00000B05  A1 00000187 R		mov eax,jPos
 00000B0A  BB 00000004			mov ebx,4
 00000B0F  F7 E3			mul ebx
 00000B11  01 05 00000193 R		add tempValPos,eax
 00000B17  8B 1D 00000193 R		mov ebx,tempValPos
 00000B1D  BE 00000667 R		mov esi,OFFSET identityMatrix
 00000B22  D9 04 1E			fld REAL4 PTR[esi+ebx]
 00000B25  D9 1D 000001A7 R		fstp dividend
 00000B2B  D9 05 000001A7 R		fld dividend
 00000B31  D9 05 000001A3 R		fld divisor
 00000B37  DE F9			fdiv
 00000B39  D9 1C 1E			fstp REAL4 PTR[esi+ebx]

 00000B3C  FF 05 00000187 R		inc jPos
 00000B42  49				dec ecx
 00000B43  75 9D			jnz finalElimInner

 00000B45  FF 05 0000018B R		inc iPos
 00000B4B  59				pop ecx
 00000B4C  83 F9 00			cmp ecx,0
 00000B4F  0F 8F FFFFFF2C		jg finalElimOuter

 00000B55  80 3D 000000D4 R		cmp userSelection,3
	   03
 00000B5C  0F 84 00000094		je matDeterminant
					

				;*********************DISPLAY I HERE****************************

 00000B62			displayMatrixIPre:
 00000B62  8B 0D 000000D5 R		mov ecx,matrixSize
 00000B68  33 C0			xor eax,eax
 00000B6A  33 DB			xor ebx,ebx

 00000B6C			displayMatrixIOuter:
 00000B6C  A1 000000D5 R		mov eax,matrixSize
 00000B71  A3 0000018B R		mov iPos,eax
 00000B76  29 0D 0000018B R		sub iPos,ecx	;As loop counter decreases, iPos remains constant, therefore iPos represents the current row.
 00000B7C  83 E9 01			sub ecx,1
 00000B7F  51				push ecx
 00000B80  8B 0D 000000D5 R		mov ecx,matrixSize	;Init inner loop size
 00000B86  BA 00000181 R		mov edx,OFFSET emptyCR
 00000B8B  E8 00000000 E		call WriteString
 00000B90  EB 00			jmp displayMatrixIInner

 00000B92			displayMatrixIInner:

 00000B92  A1 000000D5 R		mov eax,matrixSize
 00000B97  2B C1			sub eax,ecx
 00000B99  BB 00000004			mov ebx,4
 00000B9E  F7 E3			mul ebx
 00000BA0  A3 00000193 R		mov tempValPos,eax
 00000BA5  A1 0000018B R		mov eax,iPos	;**Because iPos represents the row, it needs to be multiplied by the matrixSize* TYPE matrixA to reference the correct row memory address**
 00000BAA  8B 1D 000000D5 R		mov ebx,matrixSize
 00000BB0  F7 E3			mul ebx
 00000BB2  BB 00000004			mov ebx,4
 00000BB7  F7 E3			mul ebx
 00000BB9  01 05 00000193 R		add tempValPos,eax
 00000BBF  8B 1D 00000193 R		mov ebx,tempValPos
 00000BC5  BE 00000667 R		mov esi,OFFSET identityMatrix
 00000BCA  D9 04 1E			fld REAL4 PTR[esi+ebx]
 00000BCD  E8 00000000 E		call WriteFloat
 00000BD2  D9 1D 000001AB R		fstp showNum
 00000BD8  BA 00000185 R		mov edx,OFFSET displaySeparator
 00000BDD  E8 00000000 E		call WriteString

 00000BE2  E2 AE			loop displayMatrixIInner

 00000BE4  59				pop ecx
 00000BE5  83 F9 00			cmp ecx,0
 00000BE8  7F 82			jg displayMatrixIOuter ;Loop continues if ecx in stack still had number > 0

 00000BEA  BA 00000181 R		mov edx,OFFSET emptyCR
 00000BEF  E8 00000000 E		call WriteString
 00000BF4  EB 14			jmp SKIP

 00000BF6			matDeterminant:

 00000BF6  33 C0			xor eax,eax
 00000BF8  33 DB			xor ebx,ebx
 00000BFA  8B 0D 000000D5 R		mov ecx,matrixSize
 00000C00  49				dec ecx

 00000C01			matDetCalc:
 00000C01  DE C9			fmul
 00000C03  E2 FC			loop matDetCalc

 00000C05			showDet:
 00000C05  E8 00000000 E		call WriteFloat




 00000C0A			SKIP:
					exit
 00000C0A  6A 00	   *	    push   +000000000h
 00000C0C  E8 00000000 E   *	    call   ExitProcess

 00000C11			errorMSGChoice:
 00000C11  BA 000000A5 R		mov edx,OFFSET errorChoice
 00000C16  E8 00000000 E		call WriteString
 00000C1B  E9 FFFFF3E3			jmp startPath

 00000C20			main ENDP
				END main
Microsoft (R) Macro Assembler Version 14.28.29913.0	    04/23/21 07:36:28
Matrix Mathe						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000803 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000C20 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000C20 Public STDCALL
  startPath  . . . . . . . . . .	L Near	 00000003 _TEXT	
  matrixMul  . . . . . . . . . .	L Near	 00000024 _TEXT	
  initAPre . . . . . . . . . . .	L Near	 0000007A _TEXT	
  initOuterA . . . . . . . . . .	L Near	 00000084 _TEXT	
  initInnerA . . . . . . . . . .	L Near	 000000A0 _TEXT	
  displayMatrixAPre  . . . . . .	L Near	 00000139 _TEXT	
  displayMatrixAOuter  . . . . .	L Near	 00000143 _TEXT	
  displayMatrixAInner  . . . . .	L Near	 00000169 _TEXT	
  initBPre . . . . . . . . . . .	L Near	 000001C5 _TEXT	
  initOuterB . . . . . . . . . .	L Near	 000001CF _TEXT	
  initInnerB . . . . . . . . . .	L Near	 000001EB _TEXT	
  displayMatrixBPre  . . . . . .	L Near	 00000284 _TEXT	
  displayMatrixBOuter  . . . . .	L Near	 0000028E _TEXT	
  displayMatrixBInner  . . . . .	L Near	 000002B4 _TEXT	
  addPre . . . . . . . . . . . .	L Near	 0000032A _TEXT	
  addOuter . . . . . . . . . . .	L Near	 00000362 _TEXT	
  addInner . . . . . . . . . . .	L Near	 00000393 _TEXT	
  addInnerDone . . . . . . . . .	L Near	 000003C8 _TEXT	
  subPre . . . . . . . . . . . .	L Near	 000003D5 _TEXT	
  subOuter . . . . . . . . . . .	L Near	 0000040D _TEXT	
  subInner . . . . . . . . . . .	L Near	 0000043E _TEXT	
  signedSub  . . . . . . . . . .	L Near	 0000045A _TEXT	
  afterSignedSub . . . . . . . .	L Near	 00000465 _TEXT	
  subInnerDone . . . . . . . . .	L Near	 00000482 _TEXT	
  multPre  . . . . . . . . . . .	L Near	 00000492 _TEXT	
  multOuter  . . . . . . . . . .	L Near	 0000049C _TEXT	
  multMiddle . . . . . . . . . .	L Near	 000004B6 _TEXT	
  multInner  . . . . . . . . . .	L Near	 00000501 _TEXT	
  displayMatrixCPre  . . . . . .	L Near	 000005B2 _TEXT	
  displayMatrixCOuter  . . . . .	L Near	 000005BC _TEXT	
  displayMatrixCInner  . . . . .	L Near	 000005E2 _TEXT	
  matInverse . . . . . . . . . .	L Near	 00000643 _TEXT	
  initIDPre  . . . . . . . . . .	L Near	 00000643 _TEXT	
  initIDOuter  . . . . . . . . .	L Near	 00000661 _TEXT	
  initIDInner  . . . . . . . . .	L Near	 00000678 _TEXT	
  InitIDNE . . . . . . . . . . .	L Near	 000006D3 _TEXT	
  InitIDReset  . . . . . . . . .	L Near	 00000716 _TEXT	
  InitIDResetOuter . . . . . . .	L Near	 0000071D _TEXT	
  initInversePre . . . . . . . .	L Near	 00000737 _TEXT	
  initInverseOuter . . . . . . .	L Near	 00000741 _TEXT	
  initInverseInner . . . . . . .	L Near	 00000763 _TEXT	
  EliminationPre . . . . . . . .	L Near	 0000080A _TEXT	
  EliminationOuter . . . . . . .	L Near	 00000832 _TEXT	
  EliminationMiddle  . . . . . .	L Near	 00000844 _TEXT	
  EliminationInner . . . . . . .	L Near	 000008D6 _TEXT	
  EliminationConditional . . . .	L Near	 00000A4D _TEXT	
  finalElimPre . . . . . . . . .	L Near	 00000A6D _TEXT	
  finalElimOuter . . . . . . . .	L Near	 00000A81 _TEXT	
  finalElimInner . . . . . . . .	L Near	 00000AE2 _TEXT	
  displayMatrixIPre  . . . . . .	L Near	 00000B62 _TEXT	
  displayMatrixIOuter  . . . . .	L Near	 00000B6C _TEXT	
  displayMatrixIInner  . . . . .	L Near	 00000B92 _TEXT	
  matDeterminant . . . . . . . .	L Near	 00000BF6 _TEXT	
  matDetCalc . . . . . . . . . .	L Near	 00000C01 _TEXT	
  showDet  . . . . . . . . . . .	L Near	 00000C05 _TEXT	
  SKIP . . . . . . . . . . . . .	L Near	 00000C0A _TEXT	
  errorMSGChoice . . . . . . . .	L Near	 00000C11 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
confirmSize  . . . . . . . . . .	Byte	 00000127 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displaySeparator . . . . . . . .	Byte	 00000185 _DATA	
dividend . . . . . . . . . . . .	DWord	 000001A7 _DATA	
divisor  . . . . . . . . . . . .	DWord	 000001A3 _DATA	
emptyCR  . . . . . . . . . . . .	Byte	 00000181 _DATA	
emptySpaceA  . . . . . . . . . .	Byte	 00000162 _DATA	
emptySpaceB  . . . . . . . . . .	Byte	 00000171 _DATA	
errorChoice  . . . . . . . . . .	Byte	 000000A5 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
factor . . . . . . . . . . . . .	DWord	 0000019F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
iPos . . . . . . . . . . . . . .	DWord	 0000018B _DATA	
iVal . . . . . . . . . . . . . .	DWord	 000007F7 _DATA	
identityMatrix . . . . . . . . .	DWord	 00000667 _DATA	
jPos . . . . . . . . . . . . . .	DWord	 00000187 _DATA	
jVal . . . . . . . . . . . . . .	DWord	 000007FB _DATA	
kPos . . . . . . . . . . . . . .	DWord	 0000018F _DATA	
kVal . . . . . . . . . . . . . .	DWord	 000007FF _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matrixA  . . . . . . . . . . . .	DWord	 000001B7 _DATA	
matrixB  . . . . . . . . . . . .	DWord	 00000347 _DATA	
matrixC  . . . . . . . . . . . .	DWord	 000004D7 _DATA	
matrixMessage  . . . . . . . . .	Byte	 000000D9 _DATA	
matrixSize . . . . . . . . . . .	DWord	 000000D5 _DATA	
one  . . . . . . . . . . . . . .	DWord	 000001B3 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
showNum  . . . . . . . . . . . .	DWord	 000001AB _DATA	
tempCResult  . . . . . . . . . .	DWord	 0000019B _DATA	
tempMulResult  . . . . . . . . .	DWord	 00000197 _DATA	
tempValPos . . . . . . . . . . .	DWord	 00000193 _DATA	
userChoice . . . . . . . . . . .	Byte	 00000000 _DATA	
userSelection  . . . . . . . . .	Byte	 000000D4 _DATA	
valueEntryText1  . . . . . . . .	Byte	 00000144 _DATA	
valueEntryText2  . . . . . . . .	Byte	 00000159 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
zero . . . . . . . . . . . . . .	DWord	 000001AF _DATA	

	   1 Warnings
	   0 Errors
